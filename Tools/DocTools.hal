external function val GetCredManItemValue(record IVVc,string,Boolean);
external inner procedure SumNoDownPay(record IVVc,var val,var val,var val,var val,var val,var val);
external function string 255 GetCredManNr(Longint);
external procedure GetHiddenInvoiceValues(record IVVc,var val,var val);
external function val GetCustomerOpenAmount(string,record IVVc);
external inner procedure ValToText(val,Integer,string,string,var string);
external inner procedure MailTextRow(string,string,string,var row MailTextVc,var Integer);
external inner function string 255 StrReplace(string,string,string);
external inner function Integer SetDateOrder(string);
external inner procedure LongDateToStr(Date,Integer,var string);
external inner procedure GetMonthText(string,Date,var string);
external function Boolean InvoiceHasHiddenLine(record IVVc);
external inner procedure CustAged(record CUVc,Date,Date,Date,var val,var val,var val,var val,var val,var val,var val,var val,var val,var val,boolean);
external inner procedure GetOnAccBalance(record RcVc,string,string,Boolean,Integer,var val,var val,var val,var val,var val,var val,var val,record SMVc,Array string,Array val,var Integer);
external inner procedure OneARSFormOpenOnDate(record RcVc,record CUVc,Integer,var val,var Integer,var Integer);

global
function Boolean Ext_SkipInvoiceRow(record IVVc IVr,row IVVc IVrw,Integer i)
begin
  record CMInvoicingBlock CIb;
  row IVVc tIVrw;
  Integer s;
  Boolean res;

  BlockLoad(CIb);
  res = true;
  if (IVr.CustCredManNr>0) then begin
/*
    if (CIb.DetailedInvoice==1) then begin
      if (i<3 or (IVr.InvType==kInvoiceTypeCredit and i<4)) then begin
        if (blank(IVrw.ArtCode)) then begin
          res = true;
        end;
      end;
    end;
*/
    for (s=0;s<=i;s=s+1) begin
      MatRowGet(IVr,s,tIVrw);
      if (nonblank(tIVrw.ArtCode)) then begin
        res = false;
      end;
    end;
  end;

  Ext_SkipInvoiceRow = res;
  return;
end;

global
procedure FillInvoiceData(record IVVc IVr,var record RcVc RepSpec)
begin
  record CYBlock CompYear;
  record CredManSetBlock CMb;
  val t,v,t1,t2,t3,t4;
  val abovehiddenbase,abovehiddenvat,openamount,topay2;
  string 255 tstr;
  string 255 credivno;
  record IVVc IVCreditr;
  Integer i,rwcnt;
  row IVVc IVrw;
  record UserVc Userr;
  record CredManVc CredManr;
  Date td;
  Boolean hiddenf;
  Date bd;
  val ARSSumod,ARSsactod,ARSs0od,ARSs1od,ARSs16od,ARSs31od,ARSs61od,ARSs91od,ARSs121od,ARSs151od;
  val ARSOnAccBal,ARSOnAccBalb1;
  record SMVc CurTotalsr;
  val sumbooked,sumnow,sumcurncy,sumdiff;
  Array val debbal;
  Integer debcnt,custcnt,invcnt;
  Array string 10 debaccs;
  val rval,rval2,tval;
  val openamount2,topay3,topay4;
  record CUVc CUr;
  record RcVc RepSpec2;
  record IVVc origIVr;
  longint credmannr;
  record ARVc ARr;

  BlockLoad(CompYear);

  CUr.Code = IVr.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin end;
  SumNoDownPay(IVr,t,v,t1,t2,t3,t4);
  GetHiddenInvoiceValues(IVr,abovehiddenbase,abovehiddenvat);

  RepSpec.sStartDate = CurrentDate;//F_DATUM
  credmannr = IVr.CustCredManNr;
  if(IVr.CustCredManNr<0)then begin
    if(IVr.CredInv>-1)then begin
      origIVr.SerNr = IVr.CredInv;
      if(readfirstmain(origIVr,1,true))then begin
        credmannr = origIVr.CustCredManNr;
      end;
    end;
  end;
  RepSpec.f8 = GetCredManNr(credmannr);//F_NUMMER
  if (nonblank(IVr.OfficialSerNr)) then begin
    RepSpec.f9 = IVr.OfficialSerNr;
  end else begin
    RepSpec.f9 = IVr.SerNr;
  end;
  RepSpec.vals0 = t2;//F_ORGATTBETALA
  RepSpec.f1 = IVr.CurncyCode;//F_VALUTA
  RepSpec.long2 = IVr.SerNr;//F_FAKTURANUMMER
  RepSpec.f2 = CompYear.emailAddr;//F_EGENEMAIL
  RepSpec.f3 = CompYear.Phone;//F_EGENTEL
  RepSpec.f4 = CompYear.CompName;//F_EGETNAMN
  RepSpec.f5 = CompYear.OrgNr;//F_EGETORGNR
  RepSpec.f6 = CompYear.VATNr;//F_EGETMOMSNR
  RepSpec.f7 = CompYear.Addr0;//F_EGENADRESS
  if (IVr.InvType==kInvoiceRowTypeCredit) then begin
    RepSpec.vals4 = -(abovehiddenbase + abovehiddenvat);
  end else begin
    RepSpec.vals4 = abovehiddenbase + abovehiddenvat;
  end;
  RepSpec.f10 = IVr.Sum4;
  hiddenf = InvoiceHasHiddenLine(IVr);
  openamount = GetCustomerOpenAmount(IVr.CustCode,IVr);
  RepSpec.f11 = openamount;

  BlockLoad(CMb);
  RepSpec.vals1 = GetCredManItemValue(IVr,CMb.RateItem,true);
  RepSpec.vals2 = GetCredManItemValue(IVr,CMb.InstalmentItem,true);
  RepSpec.vals3 = GetCredManItemValue(IVr,CMb.LateFeeItem,true);
  topay2 = openamount;
  if (IVr.PayDate>=CurrentDate) then begin
    topay2 = topay2 + RepSpec.vals4;
    if (hiddenf) then begin
      topay2 = topay2 + RepSpec.vals2;
    end;
  end;
  if (topay2<0) then begin
    topay2 = 0;
  end;
  RepSpec.f12 = topay2;
  ValToText(topay2,M4Val,IVr.CurncyCode,IVr.LangCode,tstr);
  RepSpec.f13 = tstr;

  rwcnt = MatRowCnt(IVr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVr,i,IVrw);
    if (IVrw.stp==kInvoiceRowTypeCredit) then begin
      credivno = IVrw.OrdRow;
      IVCreditr.SerNr = IVrw.OrdRow;
      if (ReadFirstMain(IVCreditr,1,true)) then begin  
        if (nonblank(IVCreditr.OfficialSerNr)) then begin
          credivno = IVCreditr.OfficialSerNr;
        end;
      end;
      i = rwcnt;
    end;
  end;
  RepSpec.f14 = credivno;
  CredManr.SerNr = IVr.CustCredManNr;
  if (ReadFirstMain(CredManr,1,true)) then begin
    Userr.Code = CredManr.SalesMan;
    if (ReadFirstMain(Userr,1,true)) then begin
      RepSpec.f15 = Userr.Job;
    end;
  end;
  td = AddDay(IVr.InvDate,0);
  GetMonthText(IVr.LangCode,td,tstr);
  RepSpec.f17 = tstr & " " & GetDay(td);
  GetMonthText(IVr.LangCode,IVr.InvDate,tstr);
  RepSpec.Comment = tstr;
  RepSpec.f18 = CredManr.Addr0;
  LongDateToStr(IVr.PayDate,SetDateOrder(IVr.LangCode),tstr);
  RepSpec.f20 = tstr;

  //CustAged(CUr,td,bd,td,ARSSumod,ARSsactod,ARSs0od,ARSs1od,ARSs16od,ARSs31od,ARSs61od,ARSs91od,ARSs121od,ARSs151od,0);
  //GetOnAccBalance(RepSpec,CUr.Code,CUr.CurncyCode,false,0,ARSOnAccBalB1,rval2,ARSOnAccBal,sumbooked,sumnow,sumcurncy,sumdiff,CurTotalsr,debaccs,debbal,debcnt);//ObjStr
  RepSpec.d1 = td;
	OneARSFormOpenOnDate(RepSpec,CUr,2,ARSSumod,custcnt,invcnt);//Used this function to calc user balance
  //openamount2 = ARSSumod + ARSOnAccBal;
  openamount2 = ARSSumod;//ARSSumod already included ARSOnAccBal
  
  topay3 = openamount2;
  
  if (hiddenf) then begin
    topay2 = topay2 + GetCredManItemValue(IVr,CMb.InstalmentItem,true);
  end; 
  if (topay2<0) then begin
    topay2 = 0;
  end;
  
  ARr.InvoiceNr = IVr.SerNr;
  if(readfirstmain(ARr,1,true))then begin
    if(ARr.BookRVal!=IVr.Sum4)then begin
      topay2 = topay2 - ARr.BookRVal;
      topay3 = topay3 - ARr.BookRVal;
      openamount2 = openamount2 - IVr.Sum4;
    end else begin
      openamount2 = openamount2 - ARr.BookRVal;
      topay2 = topay2 - ARr.BookRVal;
      topay3 = topay3 - ARr.BookRVal;
    end;
  end else begin
    topay2 = topay2 - IVr.Sum4;
    topay3 = topay3 - IVr.Sum4;
    openamount2 = openamount2 - IVr.Sum4;
  end;
  
  topay3 = topay3 + abovehiddenbase + abovehiddenvat;
  topay4 = topay3;
  
  topay4 = openamount2 + IVr.Sum4;
  
  if (topay3<0) then begin
    topay3 = 0;
  end;
  td = addday(td,-1);//Add one day to printout// Edit ************************** BPI Ukraine - KramarAlexandr - 03, 01 09 2021 y. at 12:55:50 PM
  RepSpec.ObjStr = DateToString(td,"DD.MM.YYYY");
  RepSpec.Stext = openamount2;
  RepSpec.FirstAcc = topay3;
  RepSpec.LastAcc = topay4;
  

  return;
end;


global
updating function Boolean Ext_CreateInvoiceText(record IVVc IVr,row MailTextVc MTrw,var record MailVc IVMailr,record Mailr oldMailr)
begin
  record LTxtVc LTxtr;
  Longint pos,l;
  string 255 tstr;
  record RcVc RepSpec;
  area a;
  record Attach2Vc Attachr;
  record RLinkVc RLr;

  FillInvoiceData(IVr,RepSpec);
  
  if (IVMailr.HtmlFlag==0) then begin
    LTxtr.Code = MTrw.FirstTxt;
    if (ReadFirstMain(LTxtr,1,true)) then begin
      ParseTextField(a,LTxtr,RepSpec,"InvLtxtVcReplaceToken");
      l = GetAreaLength(a);
      pos = 0;
      while (pos<l) begin
        tstr = GetStringFromArea(a,pos,255);
        AddToText(tstr,IVMailr); 
        pos = pos+255;
      end;
    end;
  end else begin
    LTxtr.Code = MTrw.FirstTxt;
    if (ReadFirstMain(LTxtr,1,true)) then begin
    if (ReadRecordLink(IVMailr,1,Attachr,RLr)) begin
      RecordRemove(RLr);
    end;
     CopyRecordLinks(LTxtr,IVMailr);
     if (LTxtr.HtmlFlag==1) then begin
        ParseHtmlField(IVMailr,RepSpec,"InvMailVcReplaceToken");
      end;
    end;
  end;

  SetAreaZeroSize(a);
  RecordClear(LTxtr);
  AddToText(MTrw.Header,LTxtr);
  ParseTextField(a,LTxtr,RepSpec,"InvLtxtVcReplaceToken");
  l = GetAreaLength(a);
  pos = 0;
  tstr = "";
  while (pos<l) begin
    tstr = GetStringFromArea(a,pos,255);
    pos = pos+255;
  end;
  IVMailr.Header = tstr;

  RecordUpdate(oldMailr,IVMailr,false);

  Ext_CreateInvoiceText = true;
  return;
end;


global
function Boolean Ext_MailTextRow(record IVVc IVr,string filename,string registername,string language,var row MailTextVc resMTrw,var Integer IgnoreRecordDetails)
begin
  Boolean res;

  if (IVr.InvType==kInvoiceTypeCredit) then begin
    MailTextRow("IVCreditVc","",language,resMTrw,IgnoreRecordDetails);
    res = true;
  end;

  Ext_MailTextRow = res;
  return;
end;

global
function Boolean IsOmegaCustomer()
begin
  IsOmegaCustomer = true;
  return;
end;